<!-- Build comFramework's excelExporter

     Copyright (C) 2015-2024 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)

     This program is free software: you can redistribute it and/or modify it
     under the terms of the GNU Lesser General Public License as published by the
     Free Software Foundation, either version 3 of the License, or any later
     version.

     This program is distributed in the hope that it will be useful, but WITHOUT
     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
     for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<project name="comFramework"
         default="jar"
         basedir=".."
>
  <!-- Note, if Java 18 or higher is used then ANT 1.10.14 or higher is required. Till
       ANT 1.10.13, the deprecated SecurityManager is used, which is eventually no longer
       supported by Java 18. See https://downloads.apache.org/ant/ (Visited Jan 11, 2024). -->
  <description>
 Compile all Java sources of excelExporter, execute the tests or create a jar library.
  </description>
  <echo message="Starting build of comFramework's excelExporter"/>

  <!-- Provide access to the environment, write e.g. ${env.X} to access variable X. -->
  <property environment="env"/>

  <!-- Set global properties for this build. -->
  <property name="version" value="1.3"/>
  <property name="javaReleaseForJars" value="8"/>
  <property name="srcDM" location="src/excelExporter/excelParser/dataModel"/>
  <property name="doc" location="doc"/>

  <!-- Set the classpath for this build. -->
  <path id="classpath">
    <pathelement location="bin"/>
    <!-- With ST 4.0.8 we could simply include all jars. After replacing ST by ST-4.3.1.jar
         we see the problem that the implementation of the ST jar now depends on the ANTLR
         jar. This introduces the new complexity that the ANTLR jar in turn contains a
         version of ST - basically, we could drop the ST jar. Unfortunately, the version of
         ST, which is contained in ANTLR is elder than the up-to.date ST version. To still
         beneifit from the last recent maintenance of ST, we need to offer both jars and in
         the right order. ST needs to come before ANTLR - and not only here but in the
         runtime launch script, too. -->
<!--
    <fileset dir="dist">
      <include name="*.jar"/>
    </fileset>
 -->
    <pathelement location="dist/antlr-4.13.2-complete.jar"/>
    <pathelement location="dist/log4j-api-2.4.jar"/>
    <pathelement location="dist/log4j-core-2.4.jar"/>
    <pathelement location="dist/poi-3.13-20150929.jar"/>
    <pathelement location="dist/poi-ooxml-3.13-20150929.jar"/>
    <pathelement location="dist/poi-ooxml-schemas-3.13-20150929.jar"/>
  </path>

  <!-- Preparatory steps of any target. -->
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="bin"/>
    <!-- Check the dependencies of the different source and class files. -->
    <!--<depend srcdir="src" destdir="bin"/>-->
  </target>

  <!-- Generate version information in the main file. -->
  <target name="updateAppVersionFromGit">
    <echo message="Running GitWCRev.exe to generate file GitRevision.java"/>
    <exec executable="GitWCRev.exe" dir=".">
      <arg value="."/>
      <arg value="src/excelExporter/main/GitRevision.java.template"/>
      <arg value="src/excelExporter/main/GitRevision.java"/>
      <arg value="-q"/> <!-- -q: Suppress warning on uncommitted changes -->
    </exec>
  </target>

  <!-- Generate javadocs for complete source code into ${doc} -->
  <target name="doc"
          depends="init,updateAppVersionFromGit"
          description="Generate Javadoc documentation for complete software source code"
  >
    <javadoc packagenames="*"
             sourcepath="src"
             destdir="${doc}/javadoc"
             access="private"
    >
      <arg line="-tag todo:cmf:TODO: -tag remark:cmf:Remark:"/>
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- Show the API documentation of all Java source files -->
  <target name="javadoc"
          depends="doc"
          description="Update and open the Javadoc of the project"
  >
    <!-- See http://ant.apache.org/manual/using.html#arg -->
    <exec executable="cmd.exe" dir=".">
      <arg value="/c"/>
      <arg value="${doc}/javadoc/index.html"/>
    </exec>
  </target>

  <!-- Generate javadocs for the data model only -->
  <target name="docDataModel"
          depends="init"
          description="Generate Javadoc documentation for the data model only"
  >
    <javadoc sourcefiles="${srcDM}/package-info.java,${srcDM}/Info.java,${srcDM}/FileExt.java,${srcDM}/Cluster.java,${srcDM}/CellObject.java,${srcDM}/ExcelWorkbook.java,${srcDM}/ExcelWorksheet.java,${srcDM}/RowObject.java,${srcDM}/RowObjectContainer.java,${srcDM}/ObjectList.java,${srcDM}/Identifier.java,${srcDM}/ObjectMap.java,src/excelExporter/excelParser/SortOrder.java"
             destdir="${doc}/dataModel"
             windowtitle="Data Model of excelExporter for StringTemplate V4 templates"
             doctitle="Data Model of excelExporter for StringTemplate V4 templates"
             author="Peter Vranken (Peter_Vranken@Yahoo.de)"
             Overview="src/overview.html"
    >
      <!-- See http://stackoverflow.com/questions/18063880/executing-the-eclipse-generate-javadoc-from-the-command-line -->
      <arg value="-tag"/> <arg value="todo:cmf:TODO:"/>
      <arg value="-tag"/> <arg value="remark:cmf:Remark:"/>
      <arg value="-notimestamp"/>
      <arg value="-public"/>
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- Compile the Java source files. -->
  <target name="compile"
          depends="init,updateAppVersionFromGit"
          description="Compile all Java sources belonging to application excelExporter."
  >
    <!-- Compile the java code from src into bin -->
    <!-- See http://ant.apache.org/manual/Tasks/javac.html -->
    <!-- See https://en.wikipedia.org/wiki/Java_class_file#General_layout for Java releases -->
    <!-- debuglevel="lines,vars,source" -->
    <javac release="${javaReleaseForJars}"
           sourcepath=""
           srcdir="src"
           destdir="bin"
           listfiles="no"
           includeantruntime="false"
           debug="true"
    >
      <include name="applicationInterface/cmdLineParser/*.java"/>
      <include name="applicationInterface/loggerConfiguration/*.java"/>
      <include name="excelExporter/main/*.java"/>
      <include name="excelExporter/excelParser/*/*.java"/>
      <include name="excelExporter/excelParser/*.java"/>
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:deprecation,unchecked"/>
    </javac>
  </target>

  <!-- Create a jar from the successfully compiled sources. -->
  <target name="jar"
          depends="compile"
          description="Generate a Jar file from all class files. This JAR actually is the core of the distribution of application excelExporter."
  >
    <!-- Create the distribution directory. -->
    <mkdir dir="dist"/>

    <!-- Copy required template files into the build directory. -->
    <copy todir="bin">
      <fileset dir="src">
        <include name="**/*.stg"/>
      </fileset>
    </copy>

    <!-- Package excelExporter.* to jar file. -->
    <jar jarfile="dist/excelExporter-${version}.jar"
         basedir="bin"
    >
      <manifest>
        <attribute name="Built-By" value="ant"/>
        <section name="common">
          <attribute name="Title" value="comFramework - Excel Exporter"/>
          <attribute name="Version" value="${version}"/>
          <attribute name="Vendor" value="Peter Vranken, Peter_Vranken@Yahoo.de"/>
        </section>
        <attribute name="Main-Class" value="excelExporter.main.ExcelExporter"/>
      </manifest>
      <include name="applicationInterface/*/*.class"/>
      <include name="applicationInterface/*/*.stg"/>
      <include name="excelExporter/**/*.class"/>
      <include name="excelExporter/**/*.stg"/>
    </jar>
  </target>

  <!-- Run the samples, update their output folders. -->
  <target name="runSamples"
          depends="init,jar"
          description="Make a build of application excelExporter and start a simple test run of the application"
  >
    <exec executable="cmd.exe" dir="samples/columnWise">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runColumnWise.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/firstSample">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runFirstSample.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/sortedTable">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runSortedTable.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/timeAndDate">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runTimeAndDate.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/treeView">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runTreeView.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/withoutInput">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runWithoutInput.cmd 20"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/xls2dbc/usingGroups">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runXls2dbc.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/xls2dbc/usingReferences">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runXls2dbc.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/xls2dbc/usingSheets">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runXls2dbc.cmd -v WARN"/>
    </exec>
  </target> <!-- distribution -->

  <!-- Make a clean build of application and Javadoc and run all samples. -->
  <target name="all"
          depends="clean, init, jar, doc, docDataModel, runSamples"
          description="Make a clean build of application and Javadoc and run all samples"
  />

  <!-- Delete all build products in order to enforce a later rebuild. -->
  <target name="clean" description="Remove all built files: class and jar files, the zip archives.">
    <!-- Delete the bin and dist directory trees -->
    <delete verbose="false" dir="bin"/>
    <delete verbose="true" file="dist/excelExporter-${version}.jar"/>
  </target>

</project>
