<!-- Build comFramework's code generator

     Copyright (C) 2015-2025 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)

     This program is free software: you can redistribute it and/or modify it
     under the terms of the GNU Lesser General Public License as published by the
     Free Software Foundation, either version 3 of the License, or any later
     version.

     This program is distributed in the hope that it will be useful, but WITHOUT
     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
     for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<project name="comFramework"
         default="jar"
         basedir=".."
>
  <!-- Note, if Java 18 or higher is used then ANT 1.10.14 or higher is required. Till
       ANT 1.10.13, the deprecated SecurityManager is used, which is eventually no longer
       supported by Java 18. See https://downloads.apache.org/ant/ (Visited Jan 11, 2024). -->

  <description>
Build file to generate Java sources from the antlr4 grammars, compile all Java sources of
the code generator, execute the tests or create a jar library.
  </description>
  <echo message="Starting build of comFramework's code generator"/>

  <!-- Provide access to the environment, write e.g. ${env.X} to access variable X. -->
  <property environment="env"/>

  <!-- Set global properties for this build. -->
  <property name="version" value="1.13"/>
  <property name="javaReleaseForJars" value="8"/>
  <property name="srcDM" location="src/codeGenerator/DataModelListener"/>
  <property name="doc" location="doc"/>

  <!-- Set the classpath for this build. -->
  <path id="classpath">
    <pathelement location="bin"/>

    <!-- ANTLR contains StringTemplate but not always with the latest release. This has to
         be double-checked for each new release of ANTLR. In order to benefit from the
         maintenance of ST, we need to place that jar in front of ANTLR in case ST is more
         recent. As of writing, June 2022, ANTLR is up-to-date with respect to ST, ANTLR
         4.10.1 contains ST 4.3.3. ANTLR 4.12.0 contains ST 4.3.4, ANTLR 4.13.2 contains
         ST 4.3.4. -->
<!-- antlr-4.10.1-complete.jar contains ST 4.3.3
    <pathelement location="dist/ST-4.3.3.jar"/>
-->
    <pathelement location="dist/antlr-4.13.2-complete.jar"/>
    <pathelement location="dist/log4j-1.2.11.jar"/>
<!--
    <pathelement location="dist/log4j-api-2.1.jar"/>
    <pathelement location="dist/log4j-core-2.1.jar"/>
-->
  </path>

  <!-- Preparatory steps of any target. -->
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="bin"/>
    <!-- Check the dependencies of the different source and class files. -->
    <!--<depend srcdir="src" destdir="bin"/>-->
  </target>

  <!-- Generate version information in the main file. -->
  <target name="updateAppVersionFromGit">
    <echo message="Running GitWCRev.exe to generate file GitRevision.java"/>
    <exec executable="GitWCRev.exe" dir=".">
      <arg value="."/>
      <arg value="src/codeGenerator/main/GitRevision.java.template"/>
      <arg value="src/codeGenerator/main/GitRevision.java"/>
      <arg value="-q"/> <!-- -q: Suppress warning on uncommitted changes -->
    </exec>
  </target>

  <!-- Generate javadocs for complete source code into ${doc} -->
  <target name="doc"
          depends="init,updateAppVersionFromGit"
          description="Generate Javadoc documentation for complete software source code"
  >
    <javadoc packagenames="*"
             sourcepath="src"
             destdir="${doc}/javadoc"
             access="private"
    >
      <arg line="-tag todo:cmf:TODO: -tag remark:cmf:Remark:"/>
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- Show the API documentation of all Java source files -->
  <target name="javadoc"
          depends="doc"
          description="Update and open the Javadoc of the project"
  >
    <!-- See http://ant.apache.org/manual/using.html#arg -->
    <exec executable="cmd.exe" dir=".">
      <arg value="/c"/>
      <arg value="${doc}\javadoc\index.html"/>
    </exec>
  </target>

  <!-- Generate javadocs for the data model only -->
  <target name="docDataModel"
          depends="init"
          description="Generate Javadoc documentation for the data model only"
  >
    <javadoc sourcefiles="${srcDM}/package-info.java,${srcDM}/Info.java,${srcDM}/FileExt.java,${srcDM}/Cluster.java,${srcDM}/FrameRef.java,${srcDM}/Bus.java,${srcDM}/Node.java,${srcDM}/Frame.java,${srcDM}/Pdu.java,${srcDM}/Signal.java,${srcDM}/NetObject.java,${srcDM}/AttributeDef.java,${srcDM}/Attribute.java"
             destdir="${doc}/dataModel"
             windowtitle="Data Model of codeGenerator for StringTemplate V4 templates"
             doctitle="Data Model of codeGenerator for StringTemplate V4 templates"
             author="Peter Vranken (Peter_Vranken@Yahoo.de)"
             access="private"
        >
      <!-- See http://stackoverflow.com/questions/18063880/executing-the-eclipse-generate-javadoc-from-the-command-line -->
      <arg value="-tag"/> <arg value="todo:cmf:TODO:"/>
      <arg value="-tag"/> <arg value="remark:cmf:Remark:"/>
      <arg value="-notimestamp"/>
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- Generate Java code from the DBC grammar. -->
  <target name="antlr4"
          depends="init"
          description="Run antlr4 to compile dbc grammar"
  >
    <java classname="org.antlr.v4.Tool">
       <arg value="-visitor"/>
       <arg value="-package"/>
       <arg value="codeGenerator.dbcParser"/>
       <arg value="-o"/>
       <arg value="codeGenerator/dbcParser"/>
       <arg value="codeGenerator/dbcParser/Dbc.g4"/>
       <classpath refid="classpath"/>
    </java>
<!-- With Java 18 and Ant 1.10.13 or less, the ANT task to start a Java class fails with
     message: "java.lang.UnsupportedOperationException: The Security Manager is deprecated
     and will be removed in a future release" Alternatively using the Ant task to run an
     external command still works well. We can call Java as an external process and run the
     ANTLR code generator that way. -->
<!--
    <exec executable="java.exe" dir=".">
      <arg value="-cp"/> <arg value="dist/antlr-4.13.2-complete.jar"/>
      <arg value="-ea"/>
      <arg value="org.antlr.v4.Tool"/>
      <arg value="-visitor"/>
      <arg value="-package"/> <arg value="codeGenerator.dbcParser"/>
      <arg value="-o"/> <arg value="src/codeGenerator/dbcParser"/>
      <arg value="src/codeGenerator/dbcParser/Dbc.g4"/>
    </exec>
-->
  </target>

  <!-- Compile the Java source files. -->
  <target name="compile"
          depends="init,updateAppVersionFromGit"
          description="Compile all Java sources belonging to application codeGenerator."
  >
    <!-- Compile the java code from src into bin -->
    <!-- See http://ant.apache.org/manual/Tasks/javac.html -->
    <!-- See https://en.wikipedia.org/wiki/Java_class_file#General_layout for Java releases -->
    <!-- debuglevel="lines,vars,source" -->
    <javac release="${javaReleaseForJars}"
           sourcepath=""
           srcdir="src"
           destdir="bin"
           listfiles="no"
           includeantruntime="false"
           debug="true"
    >
      <include name="cmdLineParser/*.java"/>
      <include name="codeGenerator/*/*.java"/>
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- Create a jar from the successfully compiled sources. -->
  <target name="jar"
          depends="compile"
          description="Generate a Jar file from all class files. This JAR actually is the core of the distribution of application codeGenerator."
  >
    <!-- Create the distribution directory. -->
    <mkdir dir="dist"/>

    <!-- Copy required template files into the build directory. -->
    <copy todir="bin">
      <fileset dir="src">
        <include name="**/*.stg"/>
      </fileset>
    </copy>

    <!-- Package codeGenerator.* to jar file. -->
    <jar jarfile="dist/comFrameworkCodeGenerator-${version}.jar"
         basedir="bin"
    >
      <manifest>
        <attribute name="Built-By" value="ant"/>
        <section name="common">
          <attribute name="Title" value="comFramework - Code Generator"/>
          <attribute name="Version" value="${version}"/>
          <attribute name="Vendor" value="Peter Vranken, Peter_Vranken@Yahoo.de"/>
        </section>
        <attribute name="Main-Class" value="codeGenerator.main.CodeGenerator"/>
      </manifest>
      <include name="cmdLineParser/*.class"/>
      <include name="codeGenerator/*/*.class"/>
      <include name="codeGenerator/*/*.stg"/>
    </jar>
  </target>

  <!-- Run the samples, update their output folders. -->
  <target name="runSamples"
          depends="init,jar"
          description="Make a build of code generator application and run all samples"
  >
    <echo message="Running sample raceTechnology"/>
    <exec executable="cmd.exe" dir="samples/raceTechnology">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="generateCode.cmd -v WARN"/>
    </exec>
    <echo message="Running sample AUTOSAR"/>
    <exec executable="cmd.exe" dir="samples/AUTOSAR">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="generateCode.cmd -v WARN"/>
    </exec>
    <echo message="Running sample iterations with -v WARN"/>
    <exec executable="cmd.exe" dir="samples/iterations">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runDemoIterations.cmd -v WARN"/>
    </exec>
    <echo message="Running sample iterations"/>
    <exec executable="cmd.exe" dir="samples/iterations">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runTestIterations.cmd"/>
    </exec>
    <echo message="Running sample mapCanIdToFrameIdx"/>
    <exec executable="cmd.exe" dir="samples/mapCanIdToFrameIdx">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="generateCode.cmd"/>
    </exec>
    <echo message="Running sample scratchPad"/>
    <exec executable="cmd.exe" dir="samples/scratchPad">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runDemoScratchPad.cmd -v WARN"/>
    </exec>
    <exec executable="cmd.exe" dir="samples/stringCompare">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="runDemoStringCompare.cmd -v WARN"/>
    </exec>
    <echo message="Running sample EmbeddedCoderAPIWithBusStruct"/>
    <exec executable="cmd.exe" dir="samples/EmbeddedCoderAPIWithBusStruct">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="generateCode.cmd -v WARN"/>
    </exec>
    <echo message="Compiling artifacts of sample EmbeddedCoderAPIWithBusStruct"/>
    <exec executable="cmd.exe" dir="samples/EmbeddedCoderAPIWithBusStruct/compileIt">
      <arg value="/c"/>
      <!-- line is the blank separated command line. -->
      <arg line="mingw32-make run"/>
    </exec>
  </target> <!-- runSamples -->

  <!-- Make a clean build of application and Javadoc and run all samples. -->
  <target name="all"
          depends="clean, init, jar, doc, docDataModel, runSamples"
          description="Make a clean build of application and Javadoc and run all samples"
  />

  <!-- Delete all build products in order to enforce a later rebuild. -->
  <target name="clean" description="Remove all built files: class and jar files, the zip archives.">
    <!-- Delete the bin and dist directory trees -->
    <delete verbose="false" dir="bin"/>
    <delete verbose="true" file="dist/comFrameworkCodeGenerator-${version}.jar"/>
  </target>

</project>
