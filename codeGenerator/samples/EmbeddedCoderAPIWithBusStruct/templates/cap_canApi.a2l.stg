//
// cap_canApi.a2l.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The signals of the CAN API are rendered as ASAM MCD-2 MC file. All signals in the CAN
// API and some of the frame related status elements are exposed to an MCD tool as a long
// list of flat signals.
//   The link from the signals to the map file is written as dot separated expression,
// which is at the same time the syntax of a C expression to access the signal. This
// notation is understood by A2L addess updaters like the Vector Informatik ASAP2 tool
// chain. They understand it correct as nested structs and are able to construct the right
// ECU address from a meaningful map file, *.elf in particular.
//
// Copyright (C) 2017-2024 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "lib/iterations.stg"
import "symbols.stg"

// This is the root template; the complete CAN API is rendered as ASAM2 MCD file.
canApiA2lDecl(cluster, info) ::= <<
/*
 * CAN cluster <cluster>
 *
 * This file has been created with <info.application> version <info.version>,
 * see http://sourceforge.net/projects/comframe/
 *
 * Copyright (C) 2015-<info.year> Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see \<http://www.gnu.org/licenses/>.
 */

/begin PROJECT TysonBMS ""
  /begin MODULE CAN ""
    <iteratePdusOfCluster(cluster,"both","renderPdu")>
    /begin COMPU_METHOD CONV_IDENTICAL
      "Identity, real-world value is same as binary value"
      IDENTICAL
      "%10" /* Format */
      "" /* Unit */
    /end COMPU_METHOD

    <iterateBusesOfCluster(cluster,"grpBus")>
    <iteratePdusOfCluster(cluster,"both","grpPdu")>
    <iteratePdusOfCluster(cluster,"both","grpSignalsOfPdu")>

    /begin GROUP AllCANSignals_<cluster.name>
      "All CAN signals of cluster <cluster.name>"
      ROOT
      /begin SUB_GROUP
        Signals_Rx Signals_Tx
      /end SUB_GROUP
    /end GROUP
    /begin GROUP Signals_Rx
      "All inbound CAN signals of cluster <cluster.name>"
      /begin REF_MEASUREMENT
        <iteratePdusOfCluster(cluster,"received","grpEntriesPdu")>
      /end REF_MEASUREMENT
    /end GROUP
    /begin GROUP Signals_Tx
      "All outbound CAN signals of cluster <cluster.name>"
      /begin REF_MEASUREMENT
        <iteratePdusOfCluster(cluster,"sent","grpEntriesPdu")>
      /end REF_MEASUREMENT
    /end GROUP
  /end MODULE
/end PROJECT<\n>
>>


a2lSymbol ::= [ "stsTransmission": {<bus>_<frameId()>_<symbol.fieldStsTransmission>}
              , "signal": {<bus>_<frameId()>_<symbol.signal>}
              , default: {<info.error.("Internal template error: Invalid input to dictionary a2lSymbol")>}
              ]

cExpr ::= [ "stsTransmission": {<symbol.structBus>.<symbol.structFrameSts>.<symbol.fieldStsTransmission>}
          , "signal": {<symbol.structBus>.<symbol.structFrameSts>.<symbol.fieldSignals>.<symbol.signal>}
          , default: {<info.error.("Internal template error: Invalid input to dictionary cExpr")>}
          ]


renderPdu(pdu) ::= <<
<renderVar( name=a2lSymbol.stsTransmission
          , expr=cExpr.stsTransmission
          , description={Transmission status of frame <frame.name> (<frameId()>, <frameIdHex()>) on bus <bus.name>}
          , type="uint8_t"
          , gain="1"
          , offset="0"
          , isVoidScaling=true
          , unit=false
          , min="0"
          , max={<if(pdu.isReceived)>64<else>32<endif>})>

<iterateSignalsOfPdu(pdu=pdu,mux="all",dir="both",T="renderSignal")><\n>
>>


renderSignal(signal, kind) ::= <<
<renderVar( name=a2lSymbol.signal
          , expr=cExpr.signal
          , description=signal.desc
          , type=signal.type
          , gain=signal.factor
          , offset=signal.offset
          , isVoidScaling=signal.isVoidScaling
          , unit=signal.unit
          , min=signal.min
          , max=signal.max)>

>>


renderVar(name, expr, description, type, gain, offset, isVoidScaling, unit, min, max) ::= <<
/* Declaration of variable <name> */
/begin MEASUREMENT <name>
  "<description>"
  <asap2Type.(type)>
<if(!isVoidScaling || unit)>
  CONV[<name>] /* Conversion: see next section */
<else>
  CONV_IDENTICAL
<endif>
  0 /* Resolution */
  0 /* Possible variation from exact value in percent */
  <min> /* LowerLimit */
  <max> /* UpperLimit */
  ECU_ADDRESS 0x0000 /* @ECU_Address@<expr>@ */
  SYMBOL_LINK "<expr>" 0
/end MEASUREMENT

<if(!isVoidScaling || unit)>
<if(isVoidScaling)>
/begin COMPU_METHOD CONV[<name>]
  "Identity, real-world value is same as binary value"
  IDENTICAL
  "%10" /* Format */
  "<unit>" /* Unit */
/end COMPU_METHOD

<else>
/begin COMPU_METHOD CONV[<name>]
  "Linear mapping, used for variable <name>"
  RAT_FUNC
  "%10" /* Format */
  "<unit>" /* Unit */
  COEFFS 0 -1 <offset> 0 0 -<gain>
/end COMPU_METHOD

<endif>
<endif>
>>

grpBus(bus) ::= <<
/begin GROUP Bus_<bus.name>_Rx
  "All inbound CAN messages of CAN bus <bus.name>"
  ROOT
  /begin SUB_GROUP
    <iteratePdusOfBus(bus,"received","refGrpPdu")>
  /end SUB_GROUP
  /begin REF_MEASUREMENT
  /end REF_MEASUREMENT
/end GROUP
/begin GROUP Bus_<bus.name>_Tx
  "All outbound CAN messages of CAN bus <bus.name>"
  ROOT
  /begin SUB_GROUP
    <iteratePdusOfBus(bus,"sent","refGrpPdu")>
  /end SUB_GROUP
  /begin REF_MEASUREMENT
  /end REF_MEASUREMENT
/end GROUP<\n>
>>

refGrpPdu(pdu) ::= "Msg_<bus.name>_<pdu.name>_<frameId()>_<frameIdHex()><\n>"
grpPdu(pdu) ::= <<
/begin GROUP
  Msg_<bus.name>_<pdu.name>_<frameId()>_<frameIdHex()>
  "Message <pdu.name> (<frameId()>, <frameIdHex()>, <dir()>)"
  /begin SUB_GROUP
    <refGrpSignalsOfPdu(pdu)>
  /end SUB_GROUP
  /begin REF_MEASUREMENT
    <a2lSymbol.stsTransmission>
  /end REF_MEASUREMENT
/end GROUP<\n>
>>

refGrpSignalsOfPdu(pdu) ::= "Signals_<bus.name>_<pdu.name>_<frameId()>_<frameIdHex()>"
grpSignalsOfPdu(pdu) ::= <<
/begin GROUP
  Signals_<bus.name>_<pdu.name>_<frameId()>_<frameIdHex()>
  "Signals of message <pdu.name> (<frameId()>, <frameIdHex()>, <dir()>)"
  /begin REF_MEASUREMENT
    <pdu.signalAry:
      {signal|<if(pdu.isSent || signal.isReceived)><a2lSymbol.signal><endif>};
      separator=" ", wrap
    >
  /end REF_MEASUREMENT
/end GROUP<\n>
>>

grpEntriesPdu(pdu) ::= <<
<a2lSymbol.stsTransmission>
<iterateSignalsOfPdu(pdu=pdu,mux="all",dir="both",T="grpEntriesSignal")>
>>

grpEntriesSignal(signal, kind) ::= <<
<a2lSymbol.signal><\n>
>>

dir() ::= "<if(pdu.isReceived)>inbound<else>outbound<endif>"

asap2Type ::=
[
  "bool_t"   : "UBYTE",
  "uint8_t"  : "UBYTE",
  "sint8_t"  : "SBYTE",
  "uint16_t" : "UWORD",
  "sint16_t" : "SWORD",
  "uint32_t" : "ULONG",
  "sint32_t" : "SLONG",
  "uint64_t" : "A_UINT64",
  "sint64_t" : "A_INT64",
  "float32_t": "FLOAT32_IEEE",
  "float64_t": "FLOAT64_IEEE",
  default: {<info.error.("Error in template, bad type name used in dictionary asap2Type")>}
]



sizeof ::=
[
  "bool_t"   : "1",
  "uint8_t"  : "1",
  "sint8_t"  : "1",
  "uint16_t" : "2",
  "sint16_t" : "2",
  "uint32_t" : "4",
  "sint32_t" : "4",
  "uint64_t" : "8",
  "sint64_t" : "8",
  "float32_t": "4",
  "float64_t": "8",
  default: {<info.error.("Error in template, bad type name used in dictionary asap2Type")>}
]


typeMax ::=
[
  "bool_t"   : "1",
  "uint8_t"  : "255",
  "sint8_t"  : "127",
  "uint16_t" : "65535",
  "sint16_t" : "32767",
  "uint32_t" : "4294967296",
  "sint32_t" : "2147483647",
  "uint64_t" : "TODO: Type's max value still missing in template",
  "sint64_t" : "TODO: Type's max value still missing in template",
  "float32_t": "TODO: Type's max value still missing in template",
  "float64_t": "TODO: Type's max value still missing in template",
  default: {<info.error.("Error in template, bad type name used in dictionary typeMax")>}
]


typeMin ::=
[
  "bool_t"   : "0",
  "uint8_t"  : "0",
  "sint8_t"  : "-128",
  "uint16_t" : "0",
  "sint16_t" : "-32768",
  "uint32_t" : "0",
  "sint32_t" : "-2147483648",
  "uint64_t" : "0: Type's min value still missing in template",
  "sint64_t" : "TODO: Type's min value still missing in template",
  "float32_t": "TODO: Type's min value still missing in template",
  "float64_t": "TODO: Type's min value still missing in template",
  default: {<info.error.("Error in template, bad type name used in dictionary typeMin")>}
]
